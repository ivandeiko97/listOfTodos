{"version":3,"sources":["redux/action.js","redux/reducer.js","components/TodoItemHandler.js","components/TodoItem.js","components/TodoList.js","components/TodoListHandler.js","App.js","serviceWorker.js","index.js"],"names":["DISPLAY","LOAD_ITEMS","REMOVE_ITEM","SORT_TABLE","CLEAR_ALL","loadAction","dispatch","type","Promise","all","loadApi","then","res","data","url","fetch","json","initialState","selectedTodo","requested","TodoItemHanlder","connect","state","ownProps","title","todo","user","name","email","status","completed","index","removeTodo","id","removeItemAction","props","console","log","react_default","a","createElement","className","href","concat","onClick","TodoList","_this","this","request","listTodos","sort","map","TodoItemHandler","key","loadTodos","Component","TodoListHandler","value","sortOfTableAction","clearAll","store","createStore","arguments","length","undefined","action","Object","objectSpread","_action$data","slicedToArray","todos","users","find","userId","copyTodos","toConsumableArray","b","localeCompare","filter","deletedList","applyMiddleware","thunk","App","es","components_TodoListHandler","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6512f2b7.chunk.js","sourcesContent":["export const DISPLAY= 'display';\r\nexport const LOAD_ITEMS = 'load_items';\r\nexport const REMOVE_ITEM = 'remove_item';\r\nexport const SORT_TABLE = 'sort_table';\r\nexport const CLEAR_ALL = 'clear_all';\r\n\r\nfunction displayAction(data) {\r\n  return {\r\n    type: DISPLAY,\r\n    data\r\n  };\r\n};\r\n\r\nexport function clearAllAction() {\r\n  return {\r\n    type: CLEAR_ALL\r\n  };\r\n};\r\n\r\nexport function removeItemAction(id) {\r\n  return {\r\n    type: REMOVE_ITEM,\r\n    id\r\n  };\r\n};\r\n\r\nexport function sortOfTableAction(value) {\r\n  return {\r\n    type: SORT_TABLE,\r\n    value\r\n  };\r\n};\r\n\r\n\r\nexport function loadAction() {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: LOAD_ITEMS\r\n    });\r\n    Promise.all([\r\n      loadApi('https://jsonplaceholder.typicode.com/todos'),\r\n      loadApi('https://jsonplaceholder.typicode.com/users')\r\n    ])\r\n      .then(res => dispatch(displayAction(res)))\r\n  };\r\n};\r\n\r\nfunction loadApi(url) {\r\n  return fetch(url)\r\n    .then(data => data.json())\r\n}\r\n","import { LOAD_ITEMS, DISPLAY, SORT_TABLE, REMOVE_ITEM, CLEAR_ALL } from \"./action\";\r\n\r\nconst initialState = {\r\n  data: null,\r\n  selectedTodo: null,\r\n  requested: false\r\n};\r\n\r\nexport function todoApp(state = initialState, action) {\r\n  switch(action.type) {\r\n    case LOAD_ITEMS:\r\n      return {\r\n        ...state,\r\n        requested: true\r\n      };\r\n    case DISPLAY:\r\n      const [todos, users] = action.data;\r\n      return {\r\n        ...state,\r\n        data: todos.map(todo => {\r\n          return {\r\n            ...todo,\r\n            user: users.find(user => user.id === todo.userId)\r\n          };\r\n        })\r\n      };\r\n    case SORT_TABLE: \r\n      const copyTodos = [...state.data];\r\n        switch(action.value) {\r\n          case 'author':\r\n            copyTodos.sort((a, b) => a.user.name.localeCompare(b.user.name));\r\n            break;\r\n          case 'title': \r\n            copyTodos.sort((a, b) => a.title.localeCompare(b.title));\r\n            break;\r\n          case 'completed':\r\n            copyTodos.sort((a, b) => b.completed - a.completed);\r\n            break;\r\n          default:\r\n        }\r\n      return {\r\n        ...state,\r\n        data: copyTodos\r\n      }\r\n    case REMOVE_ITEM: \r\n      return {\r\n        ...state,\r\n        data: state.data.filter(todo => todo.id !== action.id)\r\n      };\r\n    case CLEAR_ALL: {\r\n      const deletedList = [...state.data]\r\n      deletedList.length = 0;\r\n      return {\r\n        ...state,\r\n        data: deletedList\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  };\r\n};\r\n\r\n","import {connect} from 'react-redux';\r\nimport TodoItem from './TodoItem';\r\nimport { removeItemAction } from '../redux/action';\r\n\r\nfunction mapStateToProps(state, ownProps) {\r\n  return {\r\n    title: ownProps.todo.title,\r\n    user: ownProps.todo.user.name,\r\n    email: ownProps.todo.user.email,\r\n    status: ownProps.todo.completed,\r\n    index: ownProps.index\r\n  };\r\n};\r\n\r\nfunction mapStateToDispatch(dispatch) {\r\n  return {\r\n    removeTodo: (id) => dispatch(removeItemAction(id))\r\n  };\r\n};\r\n\r\nconst TodoItemHanlder = connect(mapStateToProps, mapStateToDispatch)(TodoItem);\r\n\r\nexport default TodoItemHanlder;\r\n","import React from 'react'\r\n\r\nexport default function TodoItem(props) {\r\n  const {\r\n    title,\r\n    user,\r\n    email,\r\n    status,\r\n    index\r\n  } = props\r\n  console.log(status)\r\n  return (\r\n\r\n    <tr>\r\n      <td>{title}</td>\r\n      <td className=\"userInfo\">\r\n        <a className=\"email\" href={`mailto: ${email}`}>\r\n          <span className=\"noselect\">&#9993;</span>\r\n        </a>\r\n        {user}\r\n      </td>\r\n      <td className={status ? 'completed' : 'notCompleted'}>{status ? 'completed' : 'not completed'}</td>\r\n      <td onClick={() => props.removeTodo(index)} className='deleted'>&times;</td>\r\n    </tr>\r\n  )\r\n}\r\n","import React, { Component } from 'react';\r\nimport TodoItemHandler from './TodoItemHandler';\r\n\r\nexport default class TodoList extends Component {\r\n  render() {\r\n    if (!this.props.request) {\r\n      return <button className=\"loadButton\" onClick={this.props.loadTodos}>load</button>\r\n    } else if (this.props.request && this.props.listTodos !== null) {\r\n      return (\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th className=\"noselect\" onClick={() => this.props.sort('title')}>Title</th>\r\n              <th className=\"noselect\" onClick={() => this.props.sort('author')}>User</th>   \r\n              <th className=\"noselect\" onClick={() => this.props.sort('completed')}>Completed</th>\r\n              <th></th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.props.listTodos.map(todo => {\r\n              console.log(todo)\r\n              return <TodoItemHandler todo={todo} index={todo.id}key={todo.id}/>\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      )\r\n    } else {\r\n      return (\r\n      <div className=\"loading\">loading</div>\r\n      )\r\n    }\r\n  };\r\n};\r\n\r\n","import {connect} from \"react-redux\";\r\nimport TodoList from './TodoList';\r\nimport {loadAction, sortOfTableAction, clearAllAction} from '../redux/action';\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    request: state.requested,\r\n    listTodos: state.data\r\n  };\r\n};\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    loadTodos: () =>  dispatch(loadAction()),\r\n    sort: (value) => dispatch(sortOfTableAction(value)),\r\n    clearAll: () => dispatch(clearAllAction())\r\n  };\r\n};\r\n\r\nconst TodoListHandler = connect(mapStateToProps, mapDispatchToProps)(TodoList);\r\n\r\nexport default TodoListHandler\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {createStore, applyMiddleware} from 'redux';\r\nimport {Provider} from 'react-redux';\r\nimport thunk from \"redux-thunk\"\r\nimport { todoApp } from './redux/reducer';\r\nimport TodoListHandler from './components/TodoListHandler';\r\n\r\nlet store = createStore(todoApp, applyMiddleware(thunk));\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <TodoListHandler/>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost'\r\n    // [::1] is the IPv6 localhost address.\r\n    || window.location.hostname === '[::1]'\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    || window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets;\r\n      // see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost.\r\n        // Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service '\r\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all '\r\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404\r\n        || (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}